#!/bin/bash

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
OMARCHY_THEME_PATH="$HOME/.config/omarchy/current/theme"
ZED_CONFIG_DIR="$HOME/.config/zed"
ZED_THEMES_DIR="$ZED_CONFIG_DIR/themes"
ZED_SETTINGS_PATH="$ZED_CONFIG_DIR/settings.json"
LOG_FILE="$HOME/.local/share/omazed/sync.log"
SERVICE_DIR="$HOME/.config/systemd/user"
OMARCHY_HOOKS_DIR="$HOME/.config/omarchy/hooks"
THEME_SET_HOOK="$OMARCHY_HOOKS_DIR/theme-set"
CONVERTER_SCRIPT="$HOME/.local/bin/omazed-converter.sh"

# Check if converter script is in system location (AUR install)
if [[ -f "/usr/bin/omazed-converter.sh" ]]; then
    CONVERTER_SCRIPT="/usr/bin/omazed-converter.sh"
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Logging
mkdir -p "$(dirname "$LOG_FILE")"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $*" | tee -a "$LOG_FILE" 2>/dev/null || true
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*" | tee -a "$LOG_FILE" 2>/dev/null || true
}

warn() {
echo -e "${YELLOW}[WARN]${NC} $*" | tee -a "$LOG_FILE" 2>/dev/null || true
}

error() {
echo -e "${RED}[ERROR]${NC} $*" | tee -a "$LOG_FILE" 2>/dev/null || true
}

set_theme_from_name() {
    local theme_name="$1"

    if [[ -z "$theme_name" ]]; then
        error "No theme name provided"
        return 1
    fi

    info "Setting Zed theme for: $theme_name"

    local zed_theme
    zed_theme=$(map_theme_name "$theme_name")

    local theme_file="$ZED_THEMES_DIR/${theme_name}.json"
    if [[ ! -f "$theme_file" ]]; then
        warn "Theme file not found: $theme_file"
        info "Attempting to generate from Alacritty config..."

        if convert_alacritty_to_zed "$zed_theme"; then
            if [[ -f "$theme_file" ]]; then
                success "Generated Zed theme from Alacritty config"
            fi
        else
            info "Could not generate theme, skipping update"
            return 0
        fi
    fi

    if update_zed_theme "$zed_theme"; then
        success "Theme set: $theme_name â†’ $zed_theme"
        return 0
    else
        error "Failed to set theme"
        return 1
    fi
}

check_omarchy_hook_support() {
    if command -v omarchy-hook >/dev/null 2>&1; then
        return 0
    fi

    if [[ -d "$HOME/.config/omarchy/hooks" ]]; then
        return 0
    fi

    return 1
}

setup_omarchy_hook() {
    info "Setting up omarchy hook integration..."

    local hook_marker_start="# >>> omazed hook - do not edit >>>"
    local hook_marker_end="# <<< omazed hook - do not edit <<<"
    local hook_command='omazed set "$1"'

    if [[ ! -f "$THEME_SET_HOOK" ]]; then
        cat > "$THEME_SET_HOOK" << 'EOF'
#!/bin/bash
# This hook is called with the snake-cased name of the theme that has just been set.
EOF
        chmod +x "$THEME_SET_HOOK"
        info "Created theme-set hook file"
    fi

    if grep -q "$hook_marker_start" "$THEME_SET_HOOK" 2>/dev/null; then
        sed -i "/$hook_marker_start/,/$hook_marker_end/d" "$THEME_SET_HOOK"
        info "Removed old omazed hook"
    fi

    cat >> "$THEME_SET_HOOK" << EOF

$hook_marker_start
$hook_command
$hook_marker_end
EOF

    chmod +x "$THEME_SET_HOOK"
    success "âœ“ Omarchy hook configured"
    info "Theme changes will now trigger via omarchy hooks"
}

migrate_from_systemd() {
    if systemctl --user is-enabled omazed.service 2>/dev/null; then
        info "Detected existing systemd setup, migrating to omarchy hooks..."

        if systemctl --user stop omazed.service 2>/dev/null; then
            success "âœ“ Stopped systemd service"
        fi

        if systemctl --user disable omazed.service 2>/dev/null; then
            success "âœ“ Disabled systemd service"
        fi

        if [[ -f "$SERVICE_DIR/omazed.service" ]]; then
            info "Old systemd service file remains at: $SERVICE_DIR/omazed.service"
            info "You can remove it manually if desired"
        fi

        success "âœ“ Migration from systemd to hooks completed"
        return 0
    fi
    return 1
}

setup_user() {
    info "Setting up Omazed for user: $USER"
    echo ""

    mkdir -p "$ZED_THEMES_DIR"

    if [[ -d "/usr/share/omazed/themes" ]]; then
        info "Installing themes..."
        local themes_source="/usr/share/omazed/themes"
        info "Using system themes: $themes_source"

        local installed_count=0

        if ! ls "$themes_source"/*.json >/dev/null 2>&1; then
            warn "No .json files found in $themes_source"
            error "Theme directory exists but contains no .json files"
            return 1
        fi

        for theme_file in "$themes_source"/*.json; do
            if [[ -f "$theme_file" ]]; then
                if cp "$theme_file" "$ZED_THEMES_DIR/"; then
                    info "Copied: $(basename "$theme_file")"
                    installed_count=$((installed_count + 1))
                else
                    error "Failed to copy: $(basename "$theme_file")"
                    return 1
                fi
            fi
        done

        if [[ $installed_count -gt 0 ]]; then
            success "âœ“ Installed $installed_count themes to $ZED_THEMES_DIR"
        else
            error "No themes were installed"
            return 1
        fi
    else
        info "Skipping theme installation (not an AUR installation)"
    fi

    local using_hooks="false"
    if check_omarchy_hook_support; then
        info "Omarchy hook system available - using hook integration"
        using_hooks="true"

        if migrate_from_systemd; then
            success "âœ“ Successfully migrated from systemd to hooks"
        fi

        setup_omarchy_hook
    else
        warn "Omarchy hook system not available - using systemd watcher"
        info "Consider updating omarchy for hook support in the future"

        if systemctl --user enable omazed.service 2>/dev/null; then
            success "âœ“ systemd Service enabled"
        else
            warn "! Could not enable systemd service (may not be installed to system location)"
        fi

        if systemctl --user start omazed.service 2>/dev/null; then
            success "âœ“ Service started"
        else
            warn "! Could not start service - you may need to start it manually"
        fi
    fi

    handle_theme_change

    echo ""
    success "Setup complete!"
    echo ""
    info "Testing installation..."
    test_setup

    echo ""
    success "ðŸŽ‰ Omazed is ready!"
    if [[ "$using_hooks" == "true" ]]; then
        info "Using omarchy hooks - no background service needed!"
    else
        info "Using systemd watcher - service running in background"
    fi
    info "Change your Omarchy theme and watch Zed follow along automatically!"
    return 0
}

# Reload/restart service
reload_service() {
    info "Reloading omazed service..."

    if systemctl --user is-active --quiet omazed.service; then
        if systemctl --user restart omazed.service; then
            success "âœ“ Service restarted successfully"
        else
            error "Failed to restart service"
            return 1
        fi
    else
        info "Service not running, starting it..."
        if systemctl --user start omazed.service; then
            success "âœ“ Service started successfully"
        else
            error "Failed to start service"
            return 1
        fi
    fi

    # Brief status check
    sleep 1
    if systemctl --user is-active --quiet omazed.service; then
        success "âœ“ Service is running"
        info "Current theme sync active"
    else
        warn "Service may not be running properly"
        info "Check status with: omazed status"
    fi

    return 0
}

# Check dependencies
check_deps() {
    local missing=()

    if ! command -v inotifywait >/dev/null 2>&1; then
        missing+=("inotifywait")
    fi

    if [[ ${#missing[@]} -gt 0 ]]; then
        error "Missing dependencies: ${missing[*]}"
        info "Install with: sudo pacman -S inotify-tools"
        exit 1
    fi

    return 0
}


# Get current Omarchy theme
get_current_theme() {
    local theme=""

    # Try reading file content first
    if [[ -f "$OMARCHY_THEME_PATH" ]]; then
        theme=$(cat "$OMARCHY_THEME_PATH" 2>/dev/null | tr -d '\n\r' || echo "")
    fi

    # If empty, try resolving symlink
    if [[ -z "$theme" && -L "$OMARCHY_THEME_PATH" ]]; then
        local link_target
        link_target=$(readlink "$OMARCHY_THEME_PATH" 2>/dev/null || echo "")
        if [[ -n "$link_target" ]]; then
            theme=$(basename "$link_target" | sed 's/\.theme$//' || echo "")
        fi
    fi

    echo "$theme"
}

# Map Omarchy theme name to Zed theme name using regex transformation
map_theme_name() {
    local omarchy_theme="$1"

    # Transform: capitalize first letter and letters after dashes, then replace dashes with spaces
    echo "$omarchy_theme" | sed 's/\(^\|[-]\)\([a-z]\)/\1\u\2/g; s/-/ /g'
}

# Convert Alacritty theme to Zed theme using converter script
convert_alacritty_to_zed() {
    local theme_name="$1"
    local alacritty_config="$OMARCHY_THEME_PATH/alacritty.toml"

    # Check if converter script exists
    if [[ ! -f "$CONVERTER_SCRIPT" ]]; then
        error "Converter script not found: $CONVERTER_SCRIPT"
        return 1
    fi

    # Check if alacritty config exists
    if [[ ! -f "$alacritty_config" ]]; then
        warn "Alacritty config not found: $alacritty_config"
        return 1
    fi

    info "Converting Alacritty theme to Zed theme..."
    info "Source: $alacritty_config"
    info "Target: $ZED_THEMES_DIR"

    # Create Zed themes directory if it doesn't exist
    mkdir -p "$ZED_THEMES_DIR"

    # Run the converter
    local conversion_output
    if conversion_output=$(bash "$CONVERTER_SCRIPT" "$alacritty_config" "$theme_name" "$ZED_THEMES_DIR" 2>&1); then
        success "Successfully converted Alacritty theme to Zed theme"
        info "Conversion output: $conversion_output"
        return 0
    else
        error "Failed to convert Alacritty theme"
        error "Conversion error: $conversion_output"
        return 1
    fi
}

# Update Zed settings
update_zed_theme() {
    local theme_name="$1"

    info "Setting Zed theme to: $theme_name"

    if [[ -e "/tmp/omarchy-boot-in-progress" ]]; then
        info "Omarchy boot in progress, deferring theme update"
        return 0
    fi

    # Create config directory if it doesn't exist
    mkdir -p "$ZED_CONFIG_DIR"

    # Create settings file if it doesn't exist
    if [[ ! -f "$ZED_SETTINGS_PATH" ]]; then
        echo '{"theme": "'"$theme_name"'"}' > "$ZED_SETTINGS_PATH"
    else
        # Update existing theme (handle both string and object formats)
        if grep -q '"theme"' "$ZED_SETTINGS_PATH"; then
            temp_file=$(mktemp)

            # Find the theme line and handle replacement
            awk -v theme="$theme_name" '
            BEGIN {
                in_theme_object = 0
                brace_count = 0
                theme_replaced = 0
            }
            /"theme"[[:space:]]*:[[:space:]]*"[^"]*"/ {
                # Simple string theme - replace directly
                gsub(/"theme"[[:space:]]*:[[:space:]]*"[^"]*"/, "\"theme\": \"" theme "\"")
                theme_replaced = 1
                print
                next
            }
            /"theme"[[:space:]]*:[[:space:]]*\{/ {
                # Object theme starts - replace with simple string
                gsub(/"theme"[[:space:]]*:[[:space:]]*\{.*/, "\"theme\": \"" theme "\",")
                in_theme_object = 1
                brace_count = 1
                theme_replaced = 1
                print
                next
            }
            in_theme_object == 1 {
                # Count braces to find end of theme object
                brace_count += gsub(/\{/, "{")
                brace_count -= gsub(/\}/, "}")
                if (brace_count <= 0) {
                    in_theme_object = 0
                }
                # Skip this line (part of theme object)
                next
            }
            { print }
            ' "$ZED_SETTINGS_PATH" > "$temp_file"

            # Replace original file
            mv "$temp_file" "$ZED_SETTINGS_PATH"
        else
            # Add theme before the last closing brace
            sed -i '$s/}/,\n  "theme": "'"$theme_name"'"\n}/' "$ZED_SETTINGS_PATH"
        fi
    fi

    # Verify the update worked (more flexible whitespace matching)
    if grep -q "\"theme\"[[:space:]]*:[[:space:]]*\"$theme_name\"" "$ZED_SETTINGS_PATH"; then
        success "Updated Zed settings.json"
        return 0
    else
        error "Failed to update settings"
        info "Current settings.json content around theme:"
        grep -A 5 -B 2 '"theme"' "$ZED_SETTINGS_PATH" || echo "No theme property found"
        return 1
    fi
}

# Handle theme change
handle_theme_change() {
    # Safety check - don't interfere if Omarchy is still booting
    if ! pgrep -f "omarchy" >/dev/null 2>&1 && [[ ! -e "$OMARCHY_THEME_PATH" ]]; then
        info "Omarchy not ready yet, skipping theme sync"
        return 0
    fi

    local current_theme
    current_theme=$(get_current_theme)

    if [[ -z "$current_theme" ]]; then
        warn "Could not determine current Omarchy theme"
        return 1
    fi

    info "Detected Omarchy theme: $current_theme"

    # Map to Zed theme name
    local zed_theme
    zed_theme=$(map_theme_name "$current_theme")

    # Check if corresponding theme file exists in Zed themes directory
    local theme_file="$ZED_THEMES_DIR/${current_theme}.json"
    if [[ ! -f "$theme_file" ]]; then
        warn "Theme file not found: $theme_file"

        # Try to convert from Alacritty theme
        info "Attempting to generate Zed theme from Alacritty config..."
        if convert_alacritty_to_zed "$zed_theme"; then
            # Check if the conversion created the theme file
            if [[ -f "$theme_file" ]]; then
                success "Generated Zed theme from Alacritty config: $theme_file"
            else
                warn "Theme conversion completed but file not found at expected location: $theme_file"
            fi
        else
            info "Available themes: $(ls -1 "$ZED_THEMES_DIR"/*.json 2>/dev/null | xargs -n1 basename | tr '\n' ' ')"
            info "Skipping Zed theme update - no theme file available and conversion failed"
            return 0
        fi
    fi

    # Update Zed settings
    if update_zed_theme "$zed_theme"; then
        success "Theme sync completed: $current_theme â†’ $zed_theme"
    else
        error "Failed to sync theme"
        return 1
    fi
    return 0
}

# Watch for theme changes
start_watching() {
    info "Starting omazed theme watcher..."
    info "Watching: $OMARCHY_THEME_PATH"
    info "Zed themes: $ZED_THEMES_DIR"
    info "Zed settings: $ZED_SETTINGS_PATH"

    # Wait for Omarchy to fully initialize before starting
    info "Waiting for Omarchy theme system to be ready..."
    local wait_count=0
    while [[ $wait_count -lt 30 ]]; do
        if [[ -e "$OMARCHY_THEME_PATH" ]]; then
            # Additional check - make sure the file is stable
            sleep 2
            if [[ -e "$OMARCHY_THEME_PATH" ]]; then
                break
            fi
        fi
        sleep 1
        ((wait_count++))
    done

    if [[ $wait_count -ge 30 ]]; then
        warn "Timeout waiting for Omarchy theme system - continuing anyway"
    else
        info "Omarchy theme system is ready"
    fi

    # Set initial theme
    handle_theme_change

    # Watch for changes
    local watch_dir
    watch_dir=$(dirname "$OMARCHY_THEME_PATH")
    local watch_file
    watch_file=$(basename "$OMARCHY_THEME_PATH")

    info "Monitoring $watch_dir for changes to $watch_file"

    while true; do
        if inotifywait -e modify,move,delete,create -qq "$watch_dir" 2>/dev/null; then
            sleep 0.5  # Brief delay for file operations to complete
            handle_theme_change
        fi
    done
}

# Start systemd service
start_watcher() {
    info "Starting omazed..."

    # Check if systemd service exists
    if [[ -f "$SERVICE_DIR/omazed.service" ]]; then
        # Start systemd service
        if systemctl --user start omazed.service 2>/dev/null; then
            success "Systemd service started âœ“"

            # Wait a moment and check if it's actually running
            sleep 2
            if systemctl --user is-active --quiet omazed.service; then
                success "Service is running successfully"
                return 0
            else
                error "Service started but stopped - check logs with:"
                error "  journalctl --user -u omazed.service -f"
                return 1
            fi
        else
            error "Failed to start systemd service"
            return 1
        fi
    else
        error "No systemd service found at $SERVICE_DIR/omazed.service"
        info "Please install the systemd service first or use 'omazed watch' to run in foreground"
        return 1
    fi
}

# Check status of omazed
check_status() {
    info "Checking omazed status..."

    # Check systemd service
    if systemctl --user is-active --quiet omazed.service 2>/dev/null; then
        success "Systemd service: running âœ“"

        # Show service info
        info "Service status:"
        systemctl --user status omazed.service --no-pager -l || true

        # Check configuration
        if [[ -e "$OMARCHY_THEME_PATH" ]]; then
            local current_theme
            current_theme=$(get_current_theme)
            if [[ -n "$current_theme" ]]; then
                info "Current Omarchy theme: $current_theme"
            else
                warn "Could not detect current theme"
            fi
        else
            warn "Omarchy theme file not found: $OMARCHY_THEME_PATH"
        fi

        success "Overall status: omazed is running âœ“"
        return 0
    elif systemctl --user list-unit-files --quiet | grep -q "omazed.service"; then
        warn "Systemd service: stopped"
        info "Start with: omazed start"
        return 1
    else
        warn "Systemd service: not installed"
        info "Install the systemd service or use 'omazed watch' to run in foreground"
        return 1
    fi
}

# Test current setup
test_setup() {
    info "Testing current setup..."

    # Check Omarchy theme file
    if [[ ! -e "$OMARCHY_THEME_PATH" ]]; then
        error "Omarchy theme file not found: $OMARCHY_THEME_PATH"
        return 1
    fi

    # Check current theme
    local current_theme
    current_theme=$(get_current_theme)
    if [[ -n "$current_theme" ]]; then
        success "Current Omarchy theme: $current_theme"
    else
        error "Could not detect current theme"
        return 1
    fi

    # Check Zed config
    if [[ -d "$ZED_CONFIG_DIR" ]]; then
        success "Zed config directory exists: $ZED_CONFIG_DIR"
    else
        warn "Zed config directory not found (will be created)"
    fi

    # Check converter script
    if [[ -f "$CONVERTER_SCRIPT" ]]; then
        success "Theme converter script found: $CONVERTER_SCRIPT"

    else
        warn "Theme converter script not found: $CONVERTER_SCRIPT"
        info "Automatic theme generation from Alacritty configs will not work"
    fi

    # Check installed themes
    local theme_count=0
    if [[ -d "$ZED_THEMES_DIR" ]]; then
        theme_count=$(find "$ZED_THEMES_DIR" -name "*.json" | wc -l)
        success "Found $theme_count theme(s) in Zed themes directory"
    else
        warn "No Zed themes directory found"
    fi

    # Test theme mapping
    local zed_theme
    zed_theme=$(map_theme_name "$current_theme")
    success "Theme mapping: $current_theme â†’ $zed_theme"

    # Test JSON manipulation with sed
    local test_json='{"theme": "old_theme"}'
    local updated_json=$(echo "$test_json" | sed 's/"theme"[[:space:]]*:[[:space:]]*"[^"]*"/"theme": "test"/')
    if echo "$updated_json" | grep -q '"theme": "test"'; then
        success "JSON manipulation working"
    else
        error "JSON manipulation failed"
        return 1
    fi

    success "Setup test completed successfully"
    return 0
}

# Stop systemd service
stop_watcher() {
    # Check if systemd service is running
    if systemctl --user is-active --quiet omazed.service 2>/dev/null; then
        info "Stopping omazed systemd service..."
        if systemctl --user stop omazed.service; then
            success "Systemd service stopped âœ“"
        else
            error "Failed to stop systemd service"
            return 1
        fi
    else
        info "Systemd service is not running"
    fi
}

# Cleanup
cleanup() {
    return 0
}

trap cleanup EXIT
trap 'error "Interrupted"; exit 1' INT TERM

# Print usage
usage() {
    cat << EOF
Omazed - Live theme switching for zed in omarchy

USAGE:
    $0 [COMMAND] [OPTIONS]

COMMANDS:
    start       Start the theme watcher (systemd service)
    status      Check if omazed is running
    stop        Stop the systemd service
    reload      Restart the systemd service
    watch       Start watching for theme changes (foreground)
    test        Test current setup
    sync        Sync theme once and exit
    set         Set theme by name (used by omarchy hooks)
    setup       Set up themes and service for current user

OPTIONS:
    -h, --help  Show this help

EXAMPLES:
    $0 set "tokyo-night"    # Set Zed theme to Tokyo Night
    $0 sync                 # Sync current omarchy theme to Zed

EOF
}

# Main function
main() {
    local command=""
    local theme_arg=""

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            start)
                command="start"
                shift
                ;;
            status)
                command="status"
                shift
                ;;
            stop)
                command="stop"
                shift
                ;;
            reload|restart)
                command="reload"
                shift
                ;;
            watch)
                command="watch"
                shift
                ;;
            test)
                command="test"
                shift
                ;;
            sync)
                command="sync"
                shift
                ;;
            set)
                command="set"
                shift
                theme_arg="$1"
                shift
                ;;
            setup)
                command="setup"
                shift
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
                error "Unknown option: $1"
                usage
                exit 1
                ;;
        esac
    done

    # Execute command
    case $command in
        start)
            start_watcher
            ;;
        status)
            check_status
            ;;
        stop)
            stop_watcher
            ;;
        reload)
            reload_service
            ;;
        test)
            check_deps
            test_setup
            ;;
        sync)
            check_deps
            handle_theme_change
            ;;
        set)
            if [[ -z "$theme_arg" ]]; then
                error "Theme name required for 'set' command"
                error "Usage: omazed set \"theme-name\""
                exit 1
            fi
            set_theme_from_name "$theme_arg"
            ;;
        setup)
            setup_user
            ;;
        watch)
            check_deps
            start_watching
            ;;
    esac
}

main "$@"
